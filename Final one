import math
from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *
import random

W_Width, W_Height = 500, 1000  # width and height of the game screen
wizard_x = 250  # Initial horizontal position of the wizard
wizard_y = 45  # Initial vertical position of the wizard
house_color = [0, 1, 1]  # Fixed color for the house (CYAN in RGB scale)
tem_house_color = house_color  # Temporary house color for dynamic changes
starting_wizard_y = -30  # Starting position of the wizard outside the screen
wizard_speed = 15  # Speed of the wizard's movement
wizard_visibility = False  # Visibility status of the wizard (e.g., during animations)

# Spells initialized with their position, state, and visibility
spell_1 = [[wizard_x, wizard_y, True, True], [wizard_x, wizard_y, False, True],
           [wizard_x, wizard_y, False, True], [wizard_x, wizard_y, False, True],
           [wizard_x, wizard_y, False, True], [wizard_x, wizard_y, False, True],
           [wizard_x, wizard_y, False, True], [wizard_x, wizard_y, False, True],
           [wizard_x, wizard_y, False, True], [wizard_x, wizard_y, False, True],
           [wizard_x, wizard_y, False, True], [wizard_x, wizard_y, False, True],
           [wizard_x, wizard_y, False, True]] # First set of spells at wizard's position
spell_2 = [[wizard_x - 10, wizard_y, True, True], [wizard_x - 10, wizard_y, False, True],
           [wizard_x - 10, wizard_y, False, True], [wizard_x - 10, wizard_y, False, True],
           [wizard_x - 10, wizard_y, False, True], [wizard_x - 10, wizard_y, False, True],
           [wizard_x - 10, wizard_y, False, True], [wizard_x - 10, wizard_y, False, True],
           [wizard_x - 10, wizard_y, False, True], [wizard_x - 10, wizard_y, False, True],
           [wizard_x - 10, wizard_y, False, True], [wizard_x - 10, wizard_y, False, True],
           [wizard_x - 10, wizard_y, False, True]]  # Second set of spells, slightly left
spell_3 = [[wizard_x + 10, wizard_y, True, True], [wizard_x + 10, wizard_y, False, True],
           [wizard_x + 10, wizard_y, False, True], [wizard_x + 10, wizard_y, False, True],
           [wizard_x + 10, wizard_y, False, True], [wizard_x + 10, wizard_y, False, True],
           [wizard_x + 10, wizard_y, False, True], [wizard_x + 10, wizard_y, False, True],
           [wizard_x + 10, wizard_y, False, True], [wizard_x + 10, wizard_y, False, True],
           [wizard_x + 10, wizard_y, False, True], [wizard_x + 10, wizard_y, False, True],
           [wizard_x + 10, wizard_y, False, True]] # Third set of spells, slightly right

spell_speed = 9  # Speed of the spells
spell_r = 3  # Radius of the spells
spell_num = 1  # Number of spells in play at a time
score = 0  # Initial game score
lives = 3  # Initial number of lives for the player
isPlay = False  # Game play status
gamestartStatus = "Game Started"  # Message displayed when the game starts
gameover = False  # Game over status
gameStart = False  # Initial game start status
exitGame = False  # Exit game status
shootable = True  # Whether the wizard can shoot spells
isWin = False  # Winning status of the game

# Dementor attributes: position, speed, health, visibility, color, and direction
dementor_1 = [40, 590, 5, 15, False, [1 , 1,  1], "right"]  # First dementor attributes
dementor_2 = [460, 590, 5, 50, False, [1, 0.1, 0.8], "left"]  # Second dementor attributes

# Alien bullets (curses) attributes: position, speed, visibility
curse_a1 = [dementor_1[0], dementor_1[1] - 10, 5, False]  # First curse fired by dementor_1 (curse of speed minimum)
curse_a2 = [dementor_2[0], dementor_2[1] - 10, 7, False]  # First curse fired by dementor_2
curse2_a1 = [dementor_1[0], dementor_1[1] - 10, 10, False]  # Second curse fired by dementor_1 (upgraded speed)
curse2_a2 = [dementor_2[0], dementor_2[1] - 10, 14, False]  # Second curse fired by dementor_2
curse3_a1 = [dementor_1[0], dementor_1[1] - 10, 15, False]  # Third curse fired by dementor_1 (high)
curse3_a2 = [dementor_2[0], dementor_2[1] - 10, 21, False]  # Third curse fired by dementor_2


##    Mid Point Line Drawing Algorithm Functions   ##
def originalZone(z, x, y, s):
    if z == 0:
        draw_points(x, y, s)
    elif z == 1:
        draw_points(y, x, s)
    elif z == 2:
        draw_points(-y, x, s)
    elif z == 3:
        draw_points(-x, y, s)
    elif z == 4:
        draw_points(-x, -y, s)
    elif z == 5:
        draw_points(-y, -x, s)
    elif z == 6:
        draw_points(y, -x, s)
    elif z == 7:
        draw_points(x, -y, s)


def draw_Line(x0, y0, x1, y1, c=[1, 1, 1]):
    zone = findZone(x0, y0, x1, y1)
    x0, y0 = convert_n_to_0(zone, x0, y0)
    x1, y1 = convert_n_to_0(zone, x1, y1)
    dx = x1 - x0
    dy = y1 - y0
    d0 = 2 * dy - dx
    de = 2 * dy
    dne = 2 * (dy - dx)
    x, y = x0, y0

    while (x < x1):
        originalZone(zone, x, y, c)
        if d0 < 0:
            x += 1
            d0 += de
        else:
            x += 1
            y += 1
            d0 += dne

def findZone(x1, y1, x2, y2):
    dx = x2 - x1
    dy = y2 - y1
    if abs(dx) >= abs(dy):
        if dx >= 0 and dy >= 0:
            zone = 0
        elif dx < 0 and dy >= 0:
            zone = 3
        elif dx < 0 and dy < 0:
            zone = 4
        else:
            zone = 7
    else:
        if dx >= 0 and dy > 0:
            zone = 1
        elif dx < 0 and dy > 0:
            zone = 2
        elif dx <= 0 and dy < 0:
            zone = 5
        else:
            zone = 6
    return zone

def convert_n_to_0(zone, x, y):
    if zone == 0:
        return (x, y)
    else:
        if zone == 1:
            return (y, x)
        elif zone == 2:
            return (y, -x)
        elif zone == 3:
            return (-x, y)
        elif zone == 4:
            return (-x, -y)
        elif zone == 5:
            return (-y, -x)
        elif zone == 6:
            return (-y, x)
        else:
            return (x, -y)


##    Mid Point Circle Drawing Algorithm Functions   ##
def circlePoints(x, y, x0, y0, color):
    draw_points(x + x0, y + y0, color)
    draw_points(y + x0, x + y0, color)
    draw_points(y + x0, -x + y0, color)
    draw_points(x + x0, -y + y0, color)
    draw_points(-x + x0, -y + y0, color)
    draw_points(-y + x0, -x + y0, color)
    draw_points(-y + x0, x + y0, color)
    draw_points(-x + x0, y + y0, color)


def midpointLine(radius, x0, y0, color):
    d = 1 - radius
    x = 0
    y = radius

    circlePoints(x, y, x0, y0, color)

    while x < y:
        if d < 0:
            # Choose East.
            d = d + 2 * x + 3
            x += 1
        else:
            # Choose South East.
            d = d + 2 * x - 2 * y + 5
            x += 1
            y = y - 1

        circlePoints(x, y, x0, y0, color)

def draw_circle(radius, x0, y0, color=[1, 1, 1]):
    midpointLine(radius, x0, y0, color)

def draw_points(x, y, color=[1, 1, 1]):
    glColor3f(color[0], color[1], color[2])
    glBegin(GL_POINTS)
    glVertex2f(x, y)  # jekhane show korbe pixel
    glEnd()


## Play, Pause, Exit, Restart and Convert Coordinate Drawing Functions ##
def restart_img():
    bright_color = [0.3, 1, 0.3]
    draw_Line(35, 705, 75, 705, bright_color)  # Base of the triangle
    draw_Line(55, 725, 35, 705, bright_color)  # Right side
    draw_Line(55, 685, 35, 705, bright_color)  # Left side

def exit_img():
    bright_color = [1, 0.3, 0.3]
    draw_Line(460, 690, 440, 710, bright_color)  # Top-left to bottom-right
    draw_Line(460, 710, 440, 690, bright_color)  # Bottom-left to top-right

def play_img():
    bright_color = [0.8, 1, 1]
    draw_Line(140, 690, 140, 710, bright_color)  # Left vertical line of the triangle
    draw_Line(140, 690, 160, 700, bright_color)  # Diagonal line to the right
    draw_Line(140, 710, 160, 700, bright_color)  # Diagonal line back to the top

def pause_img():
    draw_Line(140, 680, 140, 720, [1, 1, 0])
    draw_Line(160, 680, 160, 720, [1, 1, 0])

def convert_coordinate(x, y):
    global W_Width, W_Height
    a = x - (W_Width / 2) + 350 - 101
    b = (W_Height / 2) - y + 351 - 102
    return a, b


##  All Drawing Functions #
def line():
    draw_Line(0, 650, 500, 650)

def wizard():

    global wizard_x, wizard_y, house_color
    color = house_color  # Color of the wizard's decorations

    # Draw the wizard's hat
    draw_Line(wizard_x - 20, wizard_y, wizard_x + 20, wizard_y, color)  # Base of the hat
    draw_Line(wizard_x - 20, wizard_y, wizard_x, wizard_y + 40, color)  # Left side of the hat
    draw_Line(wizard_x + 20, wizard_y, wizard_x, wizard_y + 40, color)  # Right side of the hat

    # Draw the square pattern effect
    count_r = 0
    while count_r < 20:
        draw_square(count_r, wizard_x, wizard_y - 10, color)
        count_r += 1

    # Draw a horizontal line below the wizard's hat
    draw_Line(wizard_x - 30, wizard_y - 10, wizard_x + 45, wizard_y - 2, color) #right hand upper side  (showing that it giving curse)


def draw_square(count, x, y, color):

    size = 20
    half_size = size / 2

    # Set the color for the square
    glColor3fv(color)

    # Draw the four edges of the square using GL_POINTS
    glBegin(GL_POINTS)

    # Bottom edge
    for i in range(int(x - half_size), int(x + half_size) + 1):
        glVertex2f(i, y - half_size)

    # Top edge
    for i in range(int(x - half_size), int(x + half_size) + 1):
        glVertex2f(i, y + half_size)

    # Left edge
    for j in range(int(y - half_size), int(y + half_size) + 1):
        glVertex2f(x - half_size, j)

    # Right edge
    for j in range(int(y - half_size), int(y + half_size) + 1):
        glVertex2f(x + half_size, j)

    glEnd()


def starting_wizard():
    global wizard_x, starting_wizard_y, house_color
    color = house_color
    if starting_wizard_y < 600:
        count_b = 0
        while count_b < 20:
            draw_Line(wizard_x - 15, starting_wizard_y + 10 - count_b, wizard_x - 35,
                      starting_wizard_y - 10 - count_b)
            draw_Line(wizard_x + 15, starting_wizard_y + 10 - count_b, wizard_x + 35,
                      starting_wizard_y - 10 - count_b)

            count_b += 1
        count_s = 0
        while count_s < 10:
            draw_Line(wizard_x - 10, starting_wizard_y - 20 - count_s, wizard_x - 20,
                      starting_wizard_y - 30 - count_s)
            draw_Line(wizard_x + 10, starting_wizard_y - 20 - count_s, wizard_x + 20,
                      starting_wizard_y - 30 - count_s)
            draw_Line(wizard_x + 5, starting_wizard_y + 15 - count_s, wizard_x + 15,
                      starting_wizard_y + 25 - count_s)
            draw_Line(wizard_x - 5, starting_wizard_y + 15 - count_s, wizard_x - 15,
                      starting_wizard_y + 25 - count_s)
            count_s += 1
        count_r = 0
        while count_r < 20:
            draw_circle(count_r, wizard_x, starting_wizard_y, color)
            count_r += 1
        count_rs = 0
        while count_rs < 11:
            draw_circle(count_rs, wizard_x, starting_wizard_y - 23, color)
            count_rs += 1


##Lightning Bolt spell casting####
def spell1():
    global spell_1, spell_r, house_color, spell_num
    for i in spell_1:
        if i[3]:
            count = 0
            while count <= spell_r:
                draw_circle(count, i[0], i[1], house_color) #i[0]--x, [i1]---y
                count += 1

def spell2():
    global spell_2, spell_r, house_color, spell_num
    for i in spell_2:
        if i[3]:
            count = 0
            while count <= spell_r:
                draw_circle(count, i[0], i[1], house_color)
                count += 1


def spell3():
    global spell_3, house_color
    for i in spell_3:
        if i[3]:  # If spell is visible
            x, y = i[0], i[1]
            color = house_color

            # Lightning bolt shape
            draw_Line(x, y, x + 5, y + 10, color)
            draw_Line(x + 5, y + 10, x - 5, y + 20, color)
            draw_Line(x - 5, y + 20, x + 5, y + 30, color)
            draw_Line(x + 5, y + 30, x - 5, y + 40, color)


def themes():
    count = 0
    while count <= 3:
        draw_square(count, 235, 680, [1, 0, 0])  # Red Square button
        draw_square(count, 285, 680, [0, 1, 0])  # Green Square button
        draw_square(count, 335, 680, [1, 1, 0])  # Yellow Square button
        draw_square(count, 385, 680, [0, 0, 1])  # Blue Square button
        count += 1


# Function to draw a square at specific coordinates with specific color
def draw_square(count, x, y, color):
    # Define the size of the square
    size = 20  # Adjust the size as needed
    # Drawing logic for the square
    glBegin(GL_QUADS)
    glColor3fv(color)
    glVertex2f(x - size / 2, y - size / 2)  # bottom left corner
    glVertex2f(x + size / 2, y - size / 2)  # bottom right corner
    glVertex2f(x + size / 2, y + size / 2)  # top right corner
    glVertex2f(x - size / 2, y + size / 2)  # top left corner
    glEnd()

def heart():
    color = [255, 0, 0]  # Red, applied to all hearts

    if lives > 2:
        count = 0  # upper half of the heart
        while count <= 8:
            draw_circle(count, 243, 730, color)
            draw_circle(count, 257, 730, color)
            count += 1
        c2 = 0
        while c2 < 15:  # lower half of the heart
            draw_Line(235 + c2, 728 - c2, 266 - c2, 728 - c2, color)
            c2 += 1

    if lives > 1:
        # Draw the second and third hearts in red (first heart disappears)
        count = 0
        while count <= 8:
            draw_circle(count, 243 + 50, 730, color)
            draw_circle(count, 257 + 50, 730, color)
            count += 1
        c2 = 0
        while c2 < 15:
            draw_Line(235 + 50 + c2, 728 - c2, 266 + 50 - c2, 728 - c2, color)
            c2 += 1

    if lives > 0:
        # Draw only the third heart in red (first and second hearts disappear)
        count = 0
        while count <= 8:
            draw_circle(count, 243 + 100, 730, color)
            draw_circle(count, 257 + 100, 730, color)
            count += 1
        c2 = 0
        while c2 < 15:
            draw_Line(235 + 100 + c2, 728 - c2, 266 + 100 - c2, 728 - c2, color)
            c2 += 1


def dementor():
    global dementor_1
    if dementor_1[4]:  # Check if dementor is visible
        # Increase size of the triangle to make it slightly bigger
        draw_Line(dementor_1[0] - 30, dementor_1[1] + 30, dementor_1[0] + 30, dementor_1[1] + 30, [1, 0.5, 0])  # Base (Visible color: orange)
        draw_Line(dementor_1[0] - 30, dementor_1[1] + 30, dementor_1[0], dementor_1[1], [1, 0.5, 0])  # Left side
        draw_Line(dementor_1[0] + 30, dementor_1[1] + 30, dementor_1[0], dementor_1[1], [1, 0.5, 0])  # Right side

        # Increase the size of the circle to make it larger and more visible
        draw_circle(15, dementor_1[0], dementor_1[1] + 15, [1, 0.5, 0])  # Use a bright orange color for visibility


def dementor2():
    global dementor_2
    if dementor_2[4]:  # Check if dementor is visible
        # Increase size of the triangle to make it slightly bigger
        draw_Line(dementor_2[0] - 30, dementor_2[1] + 30, dementor_2[0] + 30, dementor_2[1] + 30, [1, 1, 1])  # Base (Visible color: red)
        draw_Line(dementor_2[0] - 30, dementor_2[1] + 30, dementor_2[0], dementor_2[1], [1, 1, 1])  # Left side
        draw_Line(dementor_2[0] + 30, dementor_2[1] + 30, dementor_2[0], dementor_2[1], [1, 1, 1])  # Right side

        # Increase the size of the circle to make it larger and more visible
        draw_circle(15, dementor_2[0], dementor_2[1] + 15, [1, 1, 1])  # Use a bright color for visibility

def curseOfdementor():
    def draw_lightning_bolt(start_x, start_y, length, segments, color):
        """Draws a lightning bolt as a zigzag line."""
        glColor3f(color[0], color[1], color[2])  # Set color
        wizard_x, wizard_y = start_x, start_y
        for _ in range(segments):
            x_offset = random.randint(-15, 15)  # Random horizontal offset for jagged effect
            y_offset = -length // segments  # Incremental vertical drop
            x_next, y_next = wizard_x + x_offset, wizard_y + y_offset
            draw_Line(wizard_x, wizard_y, x_next, y_next, color)
            wizard_x, wizard_y = x_next, y_next

    if curse_a1[3] and dementor_1[3]:
        draw_lightning_bolt(curse_a1[0], curse_a1[1], 40, 5, [1, 0, 1])  # Purple Lightning Bolt
    if curse_a2[3] and dementor_2[3]:
        draw_lightning_bolt(curse_a2[0], curse_a2[1], 40, 5, [1, 0, 1])  # Purple Lightning Bolt

    if spell_num > 2 and not isWin:
        if curse2_a1[3] and dementor_1[3]:
            draw_lightning_bolt(curse2_a1[0], curse2_a1[1], 60, 6, [1, 1, 0])  # Yellow Lightning Bolt
        if curse2_a2[3] and dementor_2[3]:
            draw_lightning_bolt(curse2_a2[0], curse2_a2[1], 60, 6, [1, 1, 0])  # Yellow Lightning Bolt

    if spell_num > 4 and not isWin:
        if curse3_a1[3] and dementor_1[3]:
            draw_lightning_bolt(curse3_a1[0], curse3_a1[1], 80, 7, [0.5, 0.5, 1])  # Blue Lightning Bolt
        if curse3_a2[3] and dementor_2[3]:
            draw_lightning_bolt(curse3_a2[0], curse3_a2[1], 80, 7, [0.5, 0.5, 1])  # Blue Lightning Bolt

def animate():
    global isPlay, gameStart, curse_a1, tem_house_color, curse2_a1, curse3_a1, curse3_a2, curse2_a2, isWin, spell_2, spell_1, starting_wizard_y, wizard_visibility, gameover, spell_3, exitGame, shootable, bullet_4, bullet_5, gameover, wizard_speed, gameStart, lives, tem_house_color, gamestartStatus, curse_a2, spell_1, spell_speed, wizard_x, wizard_y, house_color, dementor_1, dementor_2, score, spell_num
    glutPostRedisplay()
    # After Game over Reset all ##
    if gameover == True:
        wizard_x = 250
        house_color = [0, 1, 1]
        tem_house_color = house_color
        wizard_y = 45
        wizard_visibility = False
        starting_wizard_y = -30
        wizard_speed = 15
        spell_1 = [[wizard_x, wizard_y, True, True], [wizard_x, wizard_y, False, True],
                   [wizard_x, wizard_y, False, True], [wizard_x, wizard_y, False, True],
                   [wizard_x, wizard_y, False, True], [wizard_x, wizard_y, False, True],
                   [wizard_x, wizard_y, False, True], [wizard_x, wizard_y, False, True],
                   [wizard_x, wizard_y, False, True], [wizard_x, wizard_y, False, True],
                   [wizard_x, wizard_y, False, True], [wizard_x, wizard_y, False, True],
                   [wizard_x, wizard_y, False, True]]
        spell_2 = [[wizard_x - 10, wizard_y, True, True], [wizard_x - 10, wizard_y, False, True],
                   [wizard_x - 10, wizard_y, False, True], [wizard_x - 10, wizard_y, False, True],
                   [wizard_x - 10, wizard_y, False, True], [wizard_x - 10, wizard_y, False, True],
                   [wizard_x - 10, wizard_y, False, True], [wizard_x - 10, wizard_y, False, True],
                   [wizard_x - 10, wizard_y, False, True], [wizard_x - 10, wizard_y, False, True],
                   [wizard_x - 10, wizard_y, False, True], [wizard_x - 10, wizard_y, False, True],
                   [wizard_x - 10, wizard_y, False, True]]
        spell_3 = [[wizard_x + 10, wizard_y, True, True], [wizard_x + 10, wizard_y, False, True],
                   [wizard_x + 10, wizard_y, False, True], [wizard_x + 10, wizard_y, False, True],
                   [wizard_x + 10, wizard_y, False, True], [wizard_x + 10, wizard_y, False, True],
                   [wizard_x + 10, wizard_y, False, True], [wizard_x + 10, wizard_y, False, True],
                   [wizard_x + 10, wizard_y, False, True], [wizard_x + 10, wizard_y, False, True],
                   [wizard_x + 10, wizard_y, False, True], [wizard_x + 10, wizard_y, False, True],
                   [wizard_x + 10, wizard_y, False, True]]

        spell_speed = 9
        spell_num = 1
        isPlay = False
        gameStart = False
        exitGame = False
        shootable = True
        dementor_1 = [40, 590, 5, 100, False, [1, 1, 1], "right"]
        dementor_2 = [460, 590, 5, 100, False, [1, 0.1, 0.8], "left"]
        curse_a1 = [dementor_1[0], dementor_1[1] - 10, 5, False]
        curse_a2 = [dementor_2[0], dementor_2[1] - 10, 10, False]
        curse2_a1 = [dementor_1[0], dementor_1[1] - 10, 15, False]
        curse2_a2 = [dementor_2[0], dementor_2[1] - 10, 20, False]
        curse3_a1 = [dementor_1[0], dementor_1[1] - 10, 25, False]
        curse3_a2 = [dementor_2[0], dementor_2[1] - 10, 30, False]

    if gameStart and isPlay:
      ## starting Shooter entry and win leave ##
        if wizard_visibility == False:
            if starting_wizard_y < 45:
                starting_wizard_y += 5
            if starting_wizard_y == 45:
                wizard_visibility = True
        if isWin:
            c = 0 #not hitted by spell
            for i in spell_1:
                if i[1] != wizard_y:
                    c = 1
            if c == 0:
                for i in spell_2:
                    if i[1] != wizard_y:
                        c = 1
            if c == 0:
                for i in spell_3:
                    if i[1] != wizard_y:
                        c = 1
            if c == 0:
                wizard_visibility = False
                starting_wizard_y += 20

    if (gameStart and isPlay) and wizard_visibility:
        ##dementor vanished##
        if dementor_1[3] <= 0:
            dementor_1[4] = False
            curse_a1[3] = False
        if dementor_2[3] <= 0:
            dementor_2[4] = False
            curse_a2[3] = False
        if dementor_1[3] <= 0 and dementor_2[3] <= 0:
            if isWin == False:
                isWin = True
                print(".....................................................")
                print("You Won!")
                print("Score:", score)
        ## spell number,spell speed, Difficulties change according to score ######
        level_1_printed = False  # Flag to track if Level 1 has been printed
        level_2_printed = False  # Flag to track if Level 2 has been printed

        if score > 10 and score < 40:
            spell_num = 2
            spell_speed = 10
            wizard_speed = 18
            dementor_1[2] = 4
            dementor_2[2] = 8
            if not level_1_printed:  # Check if Level 1 has been printed
                print(f'Score {score} of Level 1')
                level_1_printed = True  # Set the flag to True once printed

        if score > 40:
            spell_num = 3
            spell_speed = 15
            wizard_speed = 20
            dementor_1[2] = 10
            dementor_2[2] = 12
            if not level_2_printed:  # Check if Level 2 has been printed
                print(f'Score {score} of Level 2')
                level_2_printed = True  # Set the flag to True once printed

        ########## wizard and dementor color auto change after got shooted ###################

        # dementor 1 hit logic: Temporary color red
        if dementor_1[5] == [0, 1, 0]:  # Red indicates a hit
            c = 0
            while c < 1000:  # Delay for visual indication
                c += 1
            dementor_1[5] = [0,1,0]  # Reset to default color (orange/brown)

        # dementor 2 hit logic: Temporary color red
        if dementor_2[5] == [1, 0, 0]:  # Red indicates a hit
            c = 0
            while c < 1000:  # Delay for visual indication
                c += 1
            dementor_2[5] = [1, 0.1, 0.8]  # Reset to default color (pink/purple)

        # wizard hit logic: Temporary color white
        if house_color == [0, 0, 0]:  # White indicates a hit
            c = 0
            while c < 1000:  # Delay for visual indication
                c += 1
            house_color = tem_house_color  # Reset to the shooter's default color

        #### dementor moving #######################
        if dementor_1[4]:
            if dementor_1[6] == "right":
                dementor_1[0] += dementor_1[2]
                if dementor_1[0] >= 460:
                    dementor_1[6] = "left"
            if dementor_1[6] == "left":
                dementor_1[0] -= dementor_1[2]
                if dementor_1[0] <= 40:
                    dementor_1[6] = "right"
        if dementor_2[4]:
            if dementor_2[6] == "right":
                dementor_2[0] += dementor_2[2]
                if dementor_2[0] >= 460:
                    dementor_2[6] = "left"
            if dementor_2[6] == "left":
                dementor_2[0] -= dementor_2[2]
                if dementor_2[0] <= 40:
                    dementor_2[6] = "right"
        ######## dementor curse looping #######################
        if gamestartStatus == "Game Running" and isWin == False:
            if dementor_1[4]:
                curse_a1[1] -= curse_a1[2]
                if curse_a1[1] <= 0:
                    curse_a1[1] = dementor_1[1] - 10
                    curse_a1[0] = dementor_1[0]
                    curse_a1[3] = True
            if dementor_2[4]:
                curse_a2[1] -= curse_a2[2]
                if curse_a2[1] <= 0:
                    curse_a2[1] = dementor_2[1] - 10
                    curse_a2[0] = dementor_2[0]
                    curse_a2[3] = True
            if spell_num > 2:
                if dementor_1[4]:
                    curse2_a1[1] -= curse2_a1[2]
                    if curse2_a1[1] > 400:
                        if curse2_a1[0] < wizard_x:
                            curse2_a1[0] += curse2_a1[2]
                        if curse2_a1[0] > wizard_x:
                            curse2_a1[0] -= curse2_a1[2]
                    if curse2_a1[1] <= 0:
                        curse2_a1[1] = dementor_1[1] - 10
                        curse2_a1[0] = dementor_1[0]
                        curse2_a1[3] = True
                if dementor_2[4]:
                    curse2_a2[1] -= curse2_a2[2]
                    if curse2_a2[1] > 400:
                        if curse2_a2[0] < wizard_x:
                            curse2_a2[0] += curse2_a2[2]
                        if curse2_a2[0] > wizard_x:
                            curse2_a2[0] -= curse2_a2[2]
                    if curse2_a2[1] <= 0:
                        curse2_a2[1] = dementor_2[1] - 10
                        curse2_a2[0] = dementor_2[0]
                        curse2_a2[3] = True
            if spell_num > 4:
                if dementor_1[4]:
                    curse3_a1[1] -= curse3_a1[2]
                    if curse3_a1[1] > 500:
                        if curse3_a1[0] < wizard_x:
                            curse3_a1[0] += curse3_a1[2]
                        if curse3_a1[0] > wizard_x:
                            curse3_a1[0] -= curse3_a1[2]
                    if curse3_a1[1] <= 0:
                        curse3_a1[1] = dementor_1[1] - 10
                        curse3_a1[0] = dementor_1[0]
                        curse3_a1[3] = True
                if dementor_2[4]:
                    curse3_a2[1] -= curse3_a2[2]
                    if curse3_a2[1] > 500:
                        if curse3_a2[0] < wizard_x:
                            curse3_a2[0] += curse3_a2[2]
                        if curse3_a2[0] > wizard_x:
                            curse3_a2[0] -= curse3_a2[2]
                    if curse3_a2[1] <= 0:
                        curse3_a2[1] = dementor_2[1] - 10
                        curse3_a2[0] = dementor_2[0]
                        curse3_a2[3] = True
        ###### loosing life ##########################
        if curse_a1[3]:
            d1 = math.sqrt((curse_a1[0] - wizard_x) ** 2 + (curse_a1[1] - wizard_y) ** 2)
            if d1 <= 28:
                curse_a1[3] = False
                tem_house_color = house_color
                house_color = [0, 0.5, 0.5]  # Change color to dark blue

                if lives > 0:
                    print("Got cursed")
                    lives -= 1
                if lives == 0:
                    gameStart = False
                    gameover = True
                    print("...............................................")
                    print("Game Over")
                    wizard_speed = 0
                    print("Score:", score)
                print("Lives:", lives)
        if curse_a2[3]:
            d1 = math.sqrt((curse_a2[0] - wizard_x) ** 2 + (curse_a2[1] - wizard_y) ** 2)
            if d1 <= 28:
                curse_a2[3] = False
                tem_house_color = house_color
                house_color = [0, 0.5, 0.5]
                if lives > 0:
                    print("Got cursed")
                    lives -= 1
                if lives == 0:
                    gameStart = False
                    gameover = True
                    print('...................................................')
                    print("Game Over")
                    wizard_speed = 0
                    print("Score:", score)
                print("Lives:", lives)
        if curse2_a1[3]:
            d1 = math.sqrt((curse2_a1[0] - wizard_x) ** 2 + (curse2_a1[1] - wizard_y) ** 2)
            if d1 <= 28:
                curse2_a1[3] = False
                tem_house_color = house_color
                house_color = [1, 0, 0.5]
                if lives > 0:
                    print("Got cursed")
                    lives -= 1
                if lives == 0:
                    gameStart = False
                    gameover = True
                    print('...................................................')
                    print("Game Over")
                    wizard_speed = 0
                    print("Score:", score)
                print("Lives:", lives)
        if curse2_a2[3]:
            d1 = math.sqrt((curse2_a2[0] - wizard_x) ** 2 + (curse2_a2[1] - wizard_y) ** 2)
            if d1 <= 28:
                curse2_a2[3] = False
                tem_house_color = house_color
                house_color = [1, 0, 0.5]
                if lives > 0:
                    print("Got cursed")
                    lives -= 1
                if lives == 0:
                    gameStart = False
                    gameover = True
                    print('...................................................')
                    print("Game Over")
                    wizard_speed = 0
                    print("Score:", score)
                print("Lives:", lives)
        if curse3_a1[3]:
            d1 = math.sqrt((curse3_a1[0] - wizard_x) ** 2 + (curse3_a1[1] - wizard_y) ** 2)
            if d1 <= 28:
                curse3_a1[3] = False
                tem_house_color = house_color
                house_color = [1, 1, 1]
                if lives > 0:
                    print("Got cursed")
                    lives -= 1
                if lives == 0:
                    gameStart = False
                    gameover = True
                    print('...................................................')
                    print("Game Over")
                    wizard_speed = 0
                    print("Score:", score)
                print("Lives:", lives)
        if curse3_a2[3]:
            d1 = math.sqrt((curse3_a2[0] - wizard_x) ** 2 + (curse3_a2[1] - wizard_y) ** 2)
            if d1 <= 28:
                curse3_a2[3] = False
                tem_house_color = house_color
                house_color = [1, 1, 1]
                if lives > 0:
                    print("Got cursed")
                    lives -= 1
                if lives == 0:
                    gameStart = False
                    gameover = True
                    print('...................................................')
                    print("Game Over")
                    wizard_speed = 0
                    print("Score:", score)
                print("Lives:", lives)
        ############# spell_1 looping ##################################################################
        for i in range(len(spell_1)):
            if spell_1[-1][2]:
                if gamestartStatus == "Game Started" or gamestartStatus == "Game Restarted":
                    if isWin == False:
                        dementor_1[4] = True
                        dementor_2[4] = True
                        curse_a1[3] = True
                        curse_a2[3] = True
                    gamestartStatus = "Game Running"
            if spell_1[i][2]:
                if isWin:
                    if spell_1[i][1] != wizard_y:
                        spell_1[i][1] = (spell_1[i][1] + spell_speed)
                    else:
                        spell_1[i][1] = wizard_y
                else:
                    spell_1[i][1] = (spell_1[i][1] + spell_speed)
                if spell_1[i][1] > wizard_y + 50 and spell_1[i][1] < wizard_y + 70:
                    if i < len(spell_1) - 1:
                        spell_1[i + 1][2] = True
                if spell_1[i][1] > 650:
                    spell_1[i][1] = wizard_y
                    spell_1[i][0] = wizard_x
                    spell_1[i][3] = True
            ###### While wizard spell clashing with dementor #############
            if spell_1[i][3]:
                d1 = math.sqrt((spell_1[i][0] - dementor_1[0]) ** 2 + (spell_1[i][1] - dementor_1[1]) ** 2)
                if d1 < 25:
                    if dementor_1[4]:
                        spell_1[i][3] = False
                        dementor_1[5] = [1, 0, 0]
                        dementor_1[3] -= 1
                        score += 1
                d2 = math.sqrt((spell_1[i][0] - dementor_2[0]) ** 2 + (spell_1[i][1] - dementor_2[1]) ** 2)
                if d2 < 25:
                    if dementor_2[4]:
                        spell_1[i][3] = False
                        dementor_2[5] = [1, 0, 0]
                        dementor_2[3] -= 1 #dementor life decrese
                        score += 1
        ############# spell_2 looping ########################
        for i in range(len(spell_2)):
            if spell_2[i][2]:
                if isWin:
                    if spell_2[i][1] != wizard_y:
                        spell_2[i][1] = (spell_2[i][1] + spell_speed)
                        if house_color == [0, 1, 1]:
                            spell_2[i][0] = (spell_2[i][0] - 0.5)
                        if house_color == [1, 0, 1]:
                            spell_2[i][0] = (spell_2[i][0] - 1)
                        if house_color == [0, 1, 0]:
                            spell_2[i][0] = (spell_2[i][0] - 2)
                        if spell_2[i][1] > wizard_y + 50 and spell_2[i][1] < wizard_y + 70:
                            if i < len(spell_2) - 1:
                                spell_2[i + 1][2] = True
                        if spell_2[i][1] > 650:
                            spell_2[i][1] = wizard_y
                            spell_2[i][0] = wizard_x - 10
                            spell_2[i][3] = True
                    else:
                        spell_2[i][1] = wizard_y
                else:
                    spell_2[i][1] = (spell_2[i][1] + spell_speed)
                    if house_color == [0, 1, 1]:
                        spell_2[i][0] = (spell_2[i][0] - 0.5)
                    if house_color == [1, 0, 1]:
                        spell_2[i][0] = (spell_2[i][0] - 1)
                    if house_color == [0, 1, 0]:
                        spell_2[i][0] = (spell_2[i][0] - 2)
                    if spell_2[i][1] > wizard_y + 50 and spell_2[i][1] < wizard_y + 70:
                        if i < len(spell_2) - 1:
                            spell_2[i + 1][2] = True
                    if spell_2[i][1] > 650:
                        spell_2[i][1] = wizard_y
                        spell_2[i][0] = wizard_x - 10
                        spell_2[i][3] = True
            ###### While clashing with dementor #############
            if spell_2[i][3] and spell_num > 2:
                d1 = math.sqrt((spell_2[i][0] - dementor_1[0]) ** 2 + (spell_2[i][1] - dementor_1[1]) ** 2)
                if d1 < 25:
                    if dementor_1[4]:
                        spell_2[i][3] = False
                        dementor_1[5] = [1, 0, 0]
                        dementor_1[3] -= 1
                        score += 1
                d2 = math.sqrt((spell_2[i][0] - dementor_2[0]) ** 2 + (spell_2[i][1] - dementor_2[1]) ** 2)
                if d2 < 25:
                    if dementor_2[4]:
                        spell_2[i][3] = False
                        dementor_2[5] = [1, 0, 0]
                        dementor_2[3] -= 3
                        score += 1
        ############# spell_3 looping #######################
        for i in range(len(spell_3)):
            if spell_3[i][2]:
                if isWin:
                    if spell_3[i][1] != wizard_y:
                        spell_3[i][1] = (spell_3[i][1] + spell_speed)
                        if house_color == [0, 1, 1]:
                            spell_3[i][0] = (spell_3[i][0] + 0.5)
                        if house_color == [1, 0, 1]:
                            spell_3[i][0] = (spell_3[i][0] + 1)
                        if house_color == [0, 1, 0]:
                            spell_3[i][0] = (spell_3[i][0] + 2)
                        if spell_3[i][1] > wizard_y + 50 and spell_3[i][1] < wizard_y + 70:
                            if i < len(spell_3) - 1:
                                spell_3[i + 1][2] = True
                        if spell_3[i][1] > 650:
                            spell_3[i][1] = wizard_y
                            spell_3[i][0] = wizard_x + 10
                            spell_3[i][3] = True
                    else:
                        spell_3[i][1] = wizard_y
                else:
                    spell_3[i][1] = (spell_3[i][1] + spell_speed)
                    if house_color == [0, 1, 1]:
                        spell_3[i][0] = (spell_3[i][0] + 0.5)
                    if house_color == [1, 0, 1]:
                        spell_3[i][0] = (spell_3[i][0] + 1)
                    if house_color == [0, 1, 0]:
                        spell_3[i][0] = (spell_3[i][0] + 2)
                    if spell_3[i][1] > wizard_y + 50 and spell_3[i][1] < wizard_y + 70:
                        if i < len(spell_3) - 1:
                            spell_3[i + 1][2] = True
                    if spell_3[i][1] > 650:
                        spell_3[i][1] = wizard_y
                        spell_3[i][0] = wizard_x + 10
                        spell_3[i][3] = True
            ###### While clashing with dementor #############
            if spell_3[i][3] and spell_num > 2:
                d1 = math.sqrt((spell_3[i][0] - dementor_1[0]) ** 2 + (spell_3[i][1] - dementor_1[1]) ** 2)
                if d1 < 25:
                    if dementor_1[4]:
                        spell_3[i][3] = False
                        dementor_1[5] = [1, 0, 0]
                        dementor_1[3] -= 5
                        score += 1
                d2 = math.sqrt((spell_3[i][0] - dementor_2[0]) ** 2 + (spell_3[i][1] - dementor_2[1]) ** 2)
                if d2 < 25:
                    if dementor_2[4]:
                        spell_3[i][3] = False
                        dementor_2[5] = [1, 0, 0]
                        dementor_2[3] -= 1
                        score += 1


# perfectly working
def mouseListener(button, state, x, y):  # /#/x, y is the x-y of the screen (2D)
    global isPlay, exitGame, gameStart, house_color, dementor_1, dementor_2, curse2_a1, curse3_a1, curse3_a2, curse2_a2, isWin, starting_wizard_y, spell_1, wizard_visibility, tem_house_color, spell_2, spell_3, bullet_4, bullet_5, spell_num, curse_a1, curse_a2, score, speed, wizard_speed, spell_r, shootable, spell_speed, wizard_y, wizard_x, lives, gameover, gamestartStatus

    if button == GLUT_LEFT_BUTTON:
        if state == GLUT_DOWN:  # Check button state to avoid double triggering
            c_X, c_y = convert_coordinate(x, y)  # Convert screen coordinates to game coordinates
            #print(f"Click detected at: c_X={c_X}, c_y={c_y}. Please click in the right place")  # Debugging

            ################ Theme Change ############
            if 665 <= c_y <= 695:  # If the click is within the color selection area
                if 235 <= c_X <= 265:  # Red button range
                    house_color = [1, 0, 0]  # Red
                    print("You chose house GRIFFINDOR!!")
                    #print(f"shooter_color updated to: {house_color}")
                elif 285 <= c_X <= 315:  # Green button range
                    house_color = [0, 1, 0]  # Green
                    print("You chose house SLYTHERIN!")
                elif 335 <= c_X <= 365:  # Yellow button range
                    house_color = [1, 1, 0]  # Yellow
                    print("You chose house HUFFLEPUFF!")
                elif 385 <= c_X <= 415:  # Blue button range
                    house_color = [0, 0, 1]  # Blue
                    print("You chose house RAVENCLAW!")

            ################ Pause and Play ############
            if 130 <= c_X <= 170 and 680 <= c_y <= 720:
                if not gameover and shootable:
                    isPlay = not isPlay
                    wizard_speed = 10 if isPlay else 0
                    if not gameStart:
                        print("..........................................................")
                        print(gamestartStatus)
                        print("Lives:", lives)
                        print("Score:", score)
                    gameStart = True

            ################ Exit Game ################
            if 430 <= c_X <= 470 and 680 <= c_y <= 720:
                print(".............................................................")
                print("Goodbye! Total Score:", score)
                glutDestroyWindow(True)

            ################ Restart Game ################
            if 30 <= c_X <= 70 and 680 <= c_y <= 720:
                exitGame = True
                isPlay = False
                if gameStart:
                    if not isWin:
                        print(".............................................................")
                        print("Game Ended. Score:", score)
                        print("Lives:", lives)
                wizard_x = 250
                house_color = [0, 1, 1]  # Default color for wizard
                tem_house_color = house_color
                wizard_y = 45
                speed = 3
                wizard_speed = 15
                isWin = False
                starting_wizard_y = -30
                wizard_visibility = False
                spell_1 = [[wizard_x, wizard_y, True, True]] + [[wizard_x, wizard_y, False, True]] * 12
                # Reset other necessary variables here as per the game logic

    glutPostRedisplay()  # Force a redraw to reflect changes

def keyboardListener(key, x, y):
    global wizard_x, wizard_speed, gameStart, dementor_1, dementor_2, isWin, isPlay, shootable, wizard_y, spell_1, gameover, gamestartStatus
    if isPlay:
        if spell_1[-1][2] and isWin == False:
            if key == b'a':
                if wizard_x > 30:
                    wizard_x -= wizard_speed
            if key == b'd':
                if wizard_x < 470:
                    wizard_x += wizard_speed

    if key == b' ' and not gameover and shootable:
        isPlay = not isPlay  # Toggle game state
        shooter_speed = 6 if isPlay else 0
        if not gameStart:
            print(gamestartStatus)
            print("Lives:", lives)
            gameStart = True


def specialKeyListener1(key, x, y):
    global wizard_x, wizard_speed, gameStart, isPlay, shootable, wizard_y, spell_1
    if isPlay and not isWin and spell_1[-1][2]:
        if key == GLUT_KEY_LEFT and wizard_x > 30:  # Move left
            wizard_x -= wizard_speed
        elif key == GLUT_KEY_RIGHT and wizard_x < 470:  # Move right
            wizard_x += wizard_speed


def iterate():
    glViewport(0, 0, 1000, 1000)
    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    glOrtho(0.0, 1000, 0.0, 1000, 0.0, 1.0)
    glMatrixMode(GL_MODELVIEW)
    glLoadIdentity()


def show_screen():  # Gl Display Screen Function
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    glLoadIdentity()
    iterate()
    if wizard_visibility:
        wizard()
        spell1()
        if spell_num > 2:
            spell2()
            spell3()

    else:
        starting_wizard()
    restart_img()
    line()
    themes()
    heart()
    curseOfdementor()
    dementor()
    dementor2()

    global isPlay
    if isPlay:
        pause_img()
    else:
        play_img()
    exit_img()
    glutSwapBuffers()


# GL Driver Codes
glutInit()
glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGB)
glutInitWindowSize(500, 750)
glutInitWindowPosition(400, 0)
wind = glutCreateWindow(b"Wizard's Duel")
glutDisplayFunc(show_screen)
glutIdleFunc(show_screen)
glutSpecialFunc(specialKeyListener1)
glutIdleFunc(animate)
glutKeyboardFunc(keyboardListener)
glutMouseFunc(mouseListener)
glutMainLoop()
